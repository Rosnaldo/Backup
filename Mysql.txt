mysql -u root -p
mysql -u root -p nome_da_database < caminho/ate/arquivo.sql
show databases;
show tables;
drop database nome_database;
create database controle_bancos;
use controle_compras;
desc compras;

create table compras (id int auto_increment primary key, valor double, data date, recebido boolean, observacoes varchar(255));

insert into compras(valor,data,recebido,observacoes)values(500.0,'2014-04-05',1,null);

select * from compras;
SELECT data, valor, from compras;
select * from compras where observacoes is null;
SELECT * FROM COMPRAS WHERE observacoes = 'isso ai';
SELECT *, (valor*3) as valor triplo from compras;
SELECT * FROM COMPRAS WHERE valor BETWEEN 200 AND 700;
SELECT * FROM COMPRAS WHERE DATA BETWEEN '2010-01-05' AND '2010-06-25';
SELECT * FROM COMPRAS WHERE RECEBIDO = false OR VALOR<500;
SELECT * FROM COMPRAS WHERE data < '2009-01-01';

SELECT data,valor,observacoes from compras where observacoes= 'celular velho da marca xpto';
SELECT data,valor,observacoes from compras where observacoes like 'celular velho%';
select * from compras where observacoes is null;

UPDATE COMPRAS SET OBSERVACOES = 'compra emergencial';
UPDATE COMPRAS SET OBSERVACOES = 'uma compra comum' WHERE DATA NOT BETWEEN '2010-01-05' AND '2010-06-25';
UPDATE COMPRAS SET OBSERVACOES = 'datas festivas' WHERE DATA IN('2010-12-25', '2010-10-12', '2010-06-12');
UPDATE compras set observacoes = 'preparando o natal' where data = '20/12/2010';
UPDATE compras SET valor = valor + 10.0 where data > 01/06/2009;

DELETE FROM COMPRAS WHERE DATA < '2009-01-01';


ALTER TABLE COMPRAS MODIFY COLUMN OBSERVACOES TEXT NOT NULL;
alter table modify observacoes varchar(255) not null;

alter table compras change nome nominho varchar(100);

alter table compras add column forma_pagt enum('cartao','boleto','dinheiro');
alter table compras drop column forma_pagt;

alter table compras modify recebido tinyint(1) default '0';//transforma em booleano

 CREATE TABLE FUNCIONARIOS (
            NOME VARCHAR(100) NOT NULL,
            CARGO ENUM('DIRETOR', 'FUNCIONARIO') NOT NULL,
            SALARIO DECIMAL(10,2) DEFAULT '10000'
        );

select sum(valor) from compras;
select avg(valor) from compras;
select sum(valor) as total,count(valor) as qtd from compras;
select recebido, sum(valor) from compras group by recebido;
select month(data), year(data), sum(valor) from compras group by month(data), year(data) order by year(data),month(data);

CREATE TABLE COMPRADORES (
      ID INT NOT NULL AUTO_INCREMENT,
      NOME VARCHAR(100) NOT NULL,
      ENDERECO VARCHAR(100) NOT NULL,
      TELEFONE VARCHAR(20) NOT NULL,
      PRIMARY KEY(ID)
    );


alter table compras add column comprador_id int;//chave estrangeira
select observacoes, valor, nome from compras join compradores on compras.comprador_id = compradores.id;//exibir duas tabelas juntas

//não permite inserir um item na tabela compra associado a um comprador invalido
alter table compras add foreing key (comprador_id) references compradores(id);

SELECT NOME, VALOR FROM COMPRAS INNER JOIN COMPRADORES ON COMPRAS.COMPRADOR_ID = COMPRADORES.ID;
        WHERE DATA < '2010-08-09'//comprador possui compras e compras esta dentro de comprador

//para exibir apenas os valors da tabela compras e não compradores
SELECT COMPRAS.* FROM COMPRAS INNER JOIN COMPRADORES ON COMPRAS.COMPRADOR_ID = COMPRADORES.ID WHERE NOME LIKE 'GUILHERME%'

SELECT COMPRADORES.NOME, SUM(VALOR) 
        FROM COMPRAS INNER JOIN COMPRADORES ON COMPRAS.COMPRADOR_ID = COMPRADORES.ID
        GROUP BY COMPRADORES.NOME

_____________________________________________________________________________________________________


select a.nome, c.nome from aluno a join
matricula m on m.aluno_id = a.id join
curso c on m.curso_id = c.id;

select a.nome from aluno a where exists (select m.id from matricula m where m.aluno_id = a.id
and
m.data <now() - interval 18 month);//pode ser   not exists

select * from aluno limit 0,2;// a partir da linha 1.(pegar dois registros)
select * from aluno limit 10 offset 3 // posicao 4 até 13

select distinct tipo from matricula

select a.nome, avg(n.nota) from nota n join
resposta r on r.id = n.resposta_id join
aluno a on a.id = r.aluno_id 
where a.nome like '%Silva%' or a.nome like '%Santos%'
group by a.nome ;

select e.id,e.pergunta, count(r.id) from resposta r join
exercicio e on e.id = r.exercicio_id  
where e.pergunta like '%o que%' 
group by e.pergunta
order by e.id;


//Nao se pode usar funcoes de agrupamento dentro de uma where (count, sum, avg)
select a.nome, c.nome, avg(n.nota) from 
nota n
join resposta r on r.id = n.resposta_id
join exercicio e on e.id = r.exercicio_id
join secao s on s.id = e.secao_id
join curso c on c.id = s.curso_id
join aluno a on a.id = r.aluno_id
group by c.nome, a.nome
having avg(n.nota) < 5;


select c.nome, count(m.id) from 
curso c join matricula m on c.id = m.curso_id
where m.tipo IN ('PAGA_PF', 'PAGA_PJ')
group by c.nome;

select c.nome, count(m.id) from 
curso c join matricula m on c.id = m.curso_id
where m.tipo IN (m2.tipo * matricula m2)
group by c.nome;

select c.nome, count(m.id) as media,
count(m.id)/(select count(m.id) from matricula m) as porcentagem from 
curso c join matricula m on c.id = m.curso_id
group by c.nome;


select a.nome, r.resposta_dada from 
aluno a left join resposta r on a.id = r.aluno_id
and r.exercicio_id = 1

________________________________________________________________________________

create index indice_por_lancamento on livros(data_de_lancamento);

select *, 
(select count(l2.data_de_lancamento) from livros l2 where l2.data_de_lancamento = l.data_de_lancamento) as anteriores
from livros l;

show index from livros;
